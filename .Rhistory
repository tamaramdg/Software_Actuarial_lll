?rnorm
require(graphics)
dnorm(0) == 1/sqrt(2*pi)
dnorm(1) == exp(-1/2)/sqrt(2*pi)
dnorm(1) == 1/sqrt(2*pi*exp(1))
## Using "log = TRUE" for an extended range :
par(mfrow = c(2,1))
plot(function(x) dnorm(x, log = TRUE), -60, 50,
main = "log { Normal density }")
curve(log(dnorm(x)), add = TRUE, col = "red", lwd = 2)
mtext("dnorm(x, log=TRUE)", adj = 0)
mtext("log(dnorm(x))", col = "red", adj = 1)
plot(function(x) pnorm(x, log.p = TRUE), -50, 10,
main = "log { Normal Cumulative }")
curve(log(pnorm(x)), add = TRUE, col = "red", lwd = 2)
mtext("pnorm(x, log=TRUE)", adj = 0)
mtext("log(pnorm(x))", col = "red", adj = 1)
## if you want the so-called 'error function'
erf <- function(x) 2 * pnorm(x * sqrt(2)) - 1
## (see Abramowitz and Stegun 29.2.29)
## and the so-called 'complementary error function'
erfc <- function(x) 2 * pnorm(x * sqrt(2), lower = FALSE)
## and the inverses
erfinv <- function (x) qnorm((1 + x)/2)/sqrt(2)
erfcinv <- function (x) qnorm(x/2, lower = FALSE)/sqrt(2)
help.search("rnorm")
args("rnorm")
a<-available.packages()
head(rownames(a),3)
nrow(a)
a
install.packages(ggplot2)
library(ggplot2)
x <- 1
x <- 2
print(x)
#Al poner mayúscula, que no ha sido definida, me marcará error
print(X)
#La asignación puede hacerse también de textos
msg <- "hola"
print(msg)
x <- #expresión incompleta
x <- #expresión incompleta
x <-
x <- #expresión incompleta
x <-
3
3
x <- #expresión incompleta
x <- #expresión incompleta, para salir de ella (dejar de ejecutar una instrucción completa) puedes presionar esc
x <- #expresión incompleta
x <- #expresión incompleta, para salir de ella (dejar de ejecutar una instrucción completa) puedes presionar esc
#Impresión de un arreglo
x <- 1:20
x
y
y <- 3:9
y
z <- 99:43
z
w <- 3:14.5
w
inf
Inf
exp (-Inf)
1/0
Inf-Inf
Inf +Inf
#Cada objeto tiene sus propiedades o atributos los cuales se pueden accesar a partir de la función
attributes (x)
x <- c(TRUE, FALSE, TRUE, TRUE, F, F, T)
X
x
x <- c(1L, 3L, 5L, -4L)
x <- c(1,3,4,-5)
x <- c(1+1i, 3+4i,  -5+-6i, 3+2i)
x <- c("a", "b", "c", "hola","mundo")
x <- vector("numeric", lenght=10)
x <- vector("numeric", length=10)
x
y <- c(1.7, "a")
y <- c(TRUE, 2)
y <- c(FALSE, 2L, 5, 5+4i)
y
#COERCIÓN FORZADA
x <- 0:6
as.numeric (x)
as.logical (x)
as.character (x)
#Errores en la coerción forzada
x <- c ("a", "b", "c")
as.numeric (x)
as.logical (x)
as.complex (x)
x <- list(1, "a", TRUE, 3+2i, 5L)
x
m <- matrix(nrow=2, ncol=2)
?matrix
m
dim (m)
dim (m)
attributes (m)
m <- matrix(data=1:6, nrow=2, ncol=3)
m
m <- matrix(1:6, 2, 3)
m
#Si yo quisiera que se llenara fila por fila, sería
m <- matrix(nrow=2, ncol=3, byrow=TRUE)
m
m <- matrix(data= 1:6, nrow=2, ncol=3, byrow=TRUE)
m
m<- matrix(1:6, 2, 3, T)
m
#Una manera alternativa de crear una matrix es desde un vector y calcular sus dimensiones
m <- 1:10
dim(m)
m <- 1:10
m
dim(m) <- c(2,5)
m
x<- 1:3
y<-10:12
#CBind une columnas
cbind(x,y)
rbind(x,y)
x<- factor(c("Si", "si", "no", "no", "si"))
x
x<- factor(c("si", "si", "no", "no", "si"))
x
x<- factor(c("azul", "verde","verde","azul"))
x
table(x)
unclass(x)
?factor
x<- factor(c("azul", "verde","verde","azul", "rojo")), levels=c("rojo","amarillo","verde","naranja")
x<- factor(c("azul", "verde","verde","azul", "rojo")), levels=c(("rojo","amarillo","verde","naranja")
x<- factor(c("azul", "verde","verde","azul", "rojo")), levels=(c("rojo","amarillo","verde","naranja")
x<- factor(c("azul", "verde","verde","azul", "rojo")), levels=(c("rojo" "amarillo" "verde" "naranja")
x<- factor(c("azul" "verde" "verde" "azul", "rojo")), levels=(c("rojo" "amarillo" "verde" "naranja")
x<- factor(c("azul", "verde", "verde", "azul", "rojo")), levels=(c("rojo", "amarillo", "verde", "naranja")
#Valores faltantes
x<- c(1, 2, NA, 10, 3)
is.na(x)
is.nan(x)
y<- c(1,2,NaN,10,3)
is.na(y)
is.nan(y)
x<- data.frame(foo=1:4, bar= c(T,T,F,F))
x
nrow(x)
ncol(x))
ncol(x)
#Names
x<- 1:3
names(x)
names(x)<- c("foo", "bar","norf")
x
names(x)
#Names en listas
x<- list (a=1, b=2, c=3)
x
#Names en matrices
m<- matrix(1:4, nrow=2, ncole=2)
#Names en matrices
m<- matrix(1:4, nrow=2, ncol=2)
dimnames(m)<-list("a","b"),c("c","d")
dimnames(m)<-list(c("a","b"),c("c","d"))
m
?read.table
y <- data.frame(a=1,b="a")
y
dput(y)
# 3. Lo guardo en mi disco duro
dput(y, file="~/ActuaríaLV/Progralll/Software_Actuarial_lll/y.R")
dput(y, file="~/GitHub/Software_Actuarial_lll/y.R")
dput(y, file="~/GitHub/Software_Actuarial_lll/y.R")
y <- data.frame(a=1,b="a")
y
# 2. Estudio la manera en la que se guardará
dput(y)
# 3. Lo guardo en mi disco duro
dput(y, file="~/GitHub/Software_Actuarial_lll/y.R")
x<- data.frame(d=2, j="m")
x
dput(x)
dput(x, file="C:\Users\socor\OneDrive\Documentos\Actuaría lV\Progra lll\Software_Actuarial_lll")
dput(x, file="~/Documentos\Actuaría lV\Progra lll\Software_Actuarial_lll/y.R")
dput(x, file="~/Documentos/Actuaría lV/Progra lll/Software_Actuarial_lll/y.R")
dput(x, file="~/Documentos/Actuaría lV/Progra lll/Software_Actuarial_lll/x.R")
dput(x, file="~/Progra lll/Software_Actuarial_lll/x.R")
dput(x, file="~/Actuaría LV/Progra lll/Software_Actuarial_lll/x.R")
mtcars<- data.frame(a="Milu", b="Kahlua", c="Jagger", d="Paloma")
mtcars
dput(mtcars)
dput(mtcars, file="~/Actuaría LV/Progra lll/Software_Actuarial_lll/Carros.R")
CarrosTamara <- dget(file="~/Actuaría LV/Progra lll/Software_Actuarial_lll/Carros.R")
CarrosTamara
mtcars
mtcars
x<- "Software Actuarial lll"
y<- data.frame(a=1, b="a")
setwd("~/Actuaría LV/Progra lll/Software_Actuarial_lll")
x<- "Software Actuarial lll"
y<- data.frame(a=1, b="a")
dump(c("x","y"),file="data.R")
rm(x,y)
source("data.R")
x
y
#Conexiones
con<- url ("https://www.fcfm.buap.mx/")
x<- readLines(con, 7)
x
writeLines(readLines(con))
X[7]<- "\t<title>FCFM</title>"
writeLines(x,"FCFM.html")
#Creamos un vector
x<- c("a", "b", "c", "d", "e")
#Veamos el vector
x
# Extraemos elementos con []
x[1]
x[2]
#También podemos extraer una secuencia de elementos
x[1:4]
#Es posible extraer los elementos quecumplen una restricción
x [x>"b"]
#De manera equivalente se puede obtener un vectro lógico
u <- x=="c"
u
x[u]
x [x>"b"]
x>"b"
x[5-3]
#CREAMOS UNA LISTA
x<- list(foo=1:4, bar=0.6)
x
x[1]
x[[1]]
x$foo
x$bar
x["bar"]
x[["bar"]]
x<- list(foo=1:4, bar=0.6, baz="Hola")
x[(c(1,3))]
x[[c(1,3)]]
name<- "baz"
x[name]
x[[name]]
x$name
#ANIDAR SUBCONJUNTOS DE LISTAS
#Se pueden extraer elementos de los elementos extraídos
x<- list(a=list(10,12,14),b=list(3.14,2.81))
x[[c(1,3)]]
x[[1]][[3]]
x[[c(2,1)]]
x<- matrix(1:6,2,3)
x
x<- matrix(1:6 , 2 , 3)
x
x[1,2]
x[2,1]
x[1,]
x(1,2, drop=FALSE)
x(1,2, drop = FALSE)
x<- matrix(1:6 , 2 , 3)
x(1,2, drop = FALSE)
x[1,2, drop = FALSE]
x[1,2, drop = FALSE]
x<- list(perrin=1:5)
x$p
x[["p"]]
x[["p", exact=FALSE]]
